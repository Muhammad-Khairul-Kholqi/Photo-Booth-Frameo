---
import CameraLayout from '../layouts/CameraLayout.astro';
---

<CameraLayout>
    <div class="flex justify-center px-5 py-10">
        <div class="w-full max-w-[1300px] flex flex-col lg:flex-row gap-5 items-start"> 
            <div class="w-full lg:max-w-[60%] space-y-6 sm:space-y-5">
                <div class="p-5 border border-gray-200 shadow-md rounded-lg bg-white">
                    <h2 class="text-xl font-bold mb-3">Camera</h2>
                    
                    <div class="relative bg-black rounded-lg overflow-hidden" style="aspect-ratio: 4/3;">
                        <video
                            id="cameraVideo"
                            autoplay
                            playsinline
                            class="w-full h-full object-cover transform -scale-x-100 hidden">
                        </video>
                        <canvas
                            id="cameraCanvas"
                            class="w-full h-full object-cover">
                        </canvas>

                        <div id="countdownOverlay" class="hidden absolute inset-0 bg-black/50 flex items-center justify-center">
                            <div class="text-white text-9xl font-bold" id="countdownNumber">3</div>
                        </div>

                        <div id="flashOverlay" class="hidden absolute inset-0 bg-white opacity-0"></div>
                    </div>

                    <div id="statusMessage" class="mt-3 text-center text-sm text-gray-600"></div>

                    <button id="startCaptureBtn" class="w-full mt-3 p-4 bg-purple-500 hover:bg-purple-600 text-white text-lg font-bold rounded-lg cursor-pointer transition-colors shadow-lg">
                        Start Capture
                    </button>
                </div>

                <div class="p-5 border border-gray-200 shadow-md rounded-lg bg-white">
                    <h3 class="text-lg font-bold mb-3">Image Filters</h3>
                    <div class="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-3">
                        <button class="filter-btn px-4 py-2 border-2 border-purple-500 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors whitespace-nowrap cursor-pointer" data-filter="none">
                            None
                        </button>
                        <button class="filter-btn px-4 py-2 border-2 border-gray-300 rounded-lg hover:border-purple-300 hover:bg-purple-50 transition-colors whitespace-nowrap cursor-pointer" data-filter="grayscale">
                            B&W
                        </button>
                        <button class="filter-btn px-4 py-2 border-2 border-gray-300 rounded-lg hover:border-purple-300 hover:bg-purple-50 transition-colors whitespace-nowrap cursor-pointer" data-filter="sepia">
                            Sepia
                        </button>
                        <button class="filter-btn px-4 py-2 border-2 border-gray-300 rounded-lg hover:border-purple-300 hover:bg-purple-50 transition-colors whitespace-nowrap cursor-pointer" data-filter="blur">
                            Blur
                        </button>
                        <button class="filter-btn px-4 py-2 border-2 border-gray-300 rounded-lg hover:border-purple-300 hover:bg-purple-50 transition-colors whitespace-nowrap cursor-pointer" data-filter="vintage">
                            Vintage
                        </button>
                        <button class="filter-btn px-4 py-2 border-2 border-gray-300 rounded-lg hover:border-purple-300 hover:bg-purple-50 transition-colors whitespace-nowrap cursor-pointer" data-filter="neon">
                            Neon
                        </button>
                    </div>
                </div>
            </div>

            <div class="w-full lg:max-w-[40%] lg:sticky lg:top-24 p-4 sm:p-5 border border-gray-200 shadow-md rounded-lg mb-5 bg-white">
                <h2 class="text-lg sm:text-xl font-bold mb-3">Captured Photos</h2>
                
                <div id="capturedPhotosContainer">
                    <p class="text-gray-500 text-center py-10">No photos captured yet</p>
                </div>

                <div id="progressContainer" class="hidden mt-4">
                    <div class="flex justify-between text-sm mb-2">
                        <span>Progress</span>
                        <span id="progressText">0/4</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                        <div id="progressBar" class="bg-purple-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                    </div>
                </div>

                <button id="downloadBtn" class="hidden w-full mt-4 p-3 bg-green-500 hover:bg-green-600 text-white font-bold rounded-lg cursor-pointer transition-colors">
                    Download HD Image
                </button>

                <a href="/setting" class="block w-full mt-3 p-3 text-center border border-gray-300 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
                    Back to Settings
                </a>
            </div>
        </div>
    </div>
</CameraLayout>

<script>
  import { photoBoothStore } from '../utils/photoBoothStore.js';

  let videoStream = null;
  let cameraCanvas = null;
  let cameraContext = null;
  let currentImageFilter = 'none';
  let capturedPhotos = [];
  let isCapturing = false;

  function applyImageFilter(imageData) {
    const data = imageData.data;
    
    switch(currentImageFilter) {
      case 'grayscale':
        for (let i = 0; i < data.length; i += 4) {
          const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
          data[i] = data[i + 1] = data[i + 2] = avg;
        }
        break;
      
      case 'sepia':
        for (let i = 0; i < data.length; i += 4) {
          const r = data[i], g = data[i + 1], b = data[i + 2];
          data[i] = Math.min(255, r * 0.393 + g * 0.769 + b * 0.189);
          data[i + 1] = Math.min(255, r * 0.349 + g * 0.686 + b * 0.168);
          data[i + 2] = Math.min(255, r * 0.272 + g * 0.534 + b * 0.131);
        }
        break;
      
      case 'blur':
        const tempData = new Uint8ClampedArray(data);
        const width = imageData.width;
        const blur = 2;
        for (let y = blur; y < imageData.height - blur; y++) {
          for (let x = blur; x < width - blur; x++) {
            let r = 0, g = 0, b = 0, count = 0;
            for (let dy = -blur; dy <= blur; dy++) {
              for (let dx = -blur; dx <= blur; dx++) {
                const idx = ((y + dy) * width + (x + dx)) * 4;
                r += tempData[idx];
                g += tempData[idx + 1];
                b += tempData[idx + 2];
                count++;
              }
            }
            const idx = (y * width + x) * 4;
            data[idx] = r / count;
            data[idx + 1] = g / count;
            data[idx + 2] = b / count;
          }
        }
        break;
      
      case 'vintage':
        for (let i = 0; i < data.length; i += 4) {
          data[i] = Math.min(255, data[i] * 1.2);
          data[i + 1] = Math.min(255, data[i + 1] * 1.1);
          data[i + 2] = Math.min(255, data[i + 2] * 0.8);
        }
        break;
      
      case 'neon':
        for (let i = 0; i < data.length; i += 4) {
          const brightness = (data[i] + data[i + 1] + data[i + 2]) / 3;
          if (brightness > 128) {
            data[i] = Math.min(255, data[i] * 1.5);
            data[i + 1] = Math.min(255, data[i + 1] * 1.3);
            data[i + 2] = Math.min(255, data[i + 2] * 2);
          }
        }
        break;
    }
    
    return imageData;
  }

  function drawFrame() {
    if (!videoStream || !cameraCanvas) return;
    
    const video = document.getElementById('cameraVideo');
    cameraContext.drawImage(video, 0, 0, cameraCanvas.width, cameraCanvas.height);
    
    if (currentImageFilter !== 'none') {
      const imageData = cameraContext.getImageData(0, 0, cameraCanvas.width, cameraCanvas.height);
      const filtered = applyImageFilter(imageData);
      cameraContext.putImageData(filtered, 0, 0);
    }
    
    requestAnimationFrame(drawFrame);
  }

  async function initCamera() {
    try {
      const video = document.getElementById('cameraVideo');
      cameraCanvas = document.getElementById('cameraCanvas');
      cameraContext = cameraCanvas.getContext('2d');
      
      videoStream = await navigator.mediaDevices.getUserMedia({ 
        video: { width: 1280, height: 960 },
        audio: false 
      });
      
      video.srcObject = videoStream;
      
      video.onloadedmetadata = () => {
        cameraCanvas.width = video.videoWidth;
        cameraCanvas.height = video.videoHeight;
        drawFrame();
        updateStatus('Camera ready! Select your filters and click "Start Capture"');
      };
    } catch (error) {
      console.error('Error accessing camera:', error);
      updateStatus('Error: Could not access camera. Please check permissions.');
    }
  }

  function updateStatus(message) {
    const statusEl = document.getElementById('statusMessage');
    if (statusEl) statusEl.textContent = message;
  }

  async function capturePhoto() {
    const canvas = document.createElement('canvas');
    canvas.width = cameraCanvas.width;
    canvas.height = cameraCanvas.height;
    const ctx = canvas.getContext('2d');
    
    ctx.drawImage(cameraCanvas, 0, 0);
    
    const flashOverlay = document.getElementById('flashOverlay');
    flashOverlay.classList.remove('hidden');
    flashOverlay.style.opacity = '1';
    setTimeout(() => {
      flashOverlay.style.opacity = '0';
      setTimeout(() => flashOverlay.classList.add('hidden'), 300);
    }, 100);
    
    return canvas.toDataURL('image/jpeg', 0.95);
  }

  async function startCountdown(seconds) {
    const overlay = document.getElementById('countdownOverlay');
    const number = document.getElementById('countdownNumber');
    
    overlay.classList.remove('hidden');
    
    for (let i = seconds; i > 0; i--) {
      number.textContent = i;
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    overlay.classList.add('hidden');
  }

  async function startCaptureSequence() {
    if (isCapturing) return;
    
    isCapturing = true;
    capturedPhotos = [];
    
    const settings = photoBoothStore.getSettings();
    const layoutInfo = photoBoothStore.getLayoutInfo(settings.layout);
    
    const progressContainer = document.getElementById('progressContainer');
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const downloadBtn = document.getElementById('downloadBtn');
    
    progressContainer.classList.remove('hidden');
    downloadBtn.classList.add('hidden');
    
    updateStatus(`Capturing ${layoutInfo.count} photos...`);
    
    for (let i = 0; i < layoutInfo.count; i++) {
      updateStatus(`Photo ${i + 1}/${layoutInfo.count} - Get ready!`);
      await startCountdown(settings.countdown);
      
      const photo = await capturePhoto();
      capturedPhotos.push(photo);
      
      const progress = ((i + 1) / layoutInfo.count) * 100;
      progressBar.style.width = `${progress}%`;
      progressText.textContent = `${i + 1}/${layoutInfo.count}`;
      
      displayCapturedPhotos();
      
      if (i < layoutInfo.count - 1) {
        updateStatus(`Next photo in 2 seconds...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    photoBoothStore.savePhotos(capturedPhotos);
    updateStatus('All photos captured! You can download now.');
    downloadBtn.classList.remove('hidden');
    isCapturing = false;
  }

  function displayCapturedPhotos() {
    const container = document.getElementById('capturedPhotosContainer');
    const settings = photoBoothStore.getSettings();
    const layoutInfo = photoBoothStore.getLayoutInfo(settings.layout);
    
    let gridClass = '';
    if (settings.layout === '2x1' || settings.layout === '2x2') {
      gridClass = 'grid-cols-2';
    } else if (settings.layout === '3x1') {
      gridClass = 'grid-cols-3';
    }
    
    container.innerHTML = `
      <div class="grid ${gridClass} gap-2">
        ${capturedPhotos.map(photo => `
          <img src="${photo}" class="w-full h-auto rounded-lg border border-gray-300" alt="Captured photo" />
        `).join('')}
      </div>
    `;
  }

  function generateFinalImage() {
    const settings = photoBoothStore.getSettings();
    const layoutInfo = photoBoothStore.getLayoutInfo(settings.layout);
    
    const finalCanvas = document.createElement('canvas');
    const photoWidth = 800;
    const photoHeight = 600;
    const padding = 40;
    const gap = 20;
    const captionHeight = 80;
    
    let canvasWidth, canvasHeight;
    
    if (settings.layout === '2x1') {
      canvasWidth = (photoWidth * 2) + (gap) + (padding * 2);
      canvasHeight = photoHeight + (padding * 2) + captionHeight;
    } else if (settings.layout === '3x1') {
      canvasWidth = (photoWidth * 3) + (gap * 2) + (padding * 2);
      canvasHeight = photoHeight + (padding * 2) + captionHeight;
    } else {
      canvasWidth = (photoWidth * 2) + gap + (padding * 2);
      canvasHeight = (photoHeight * 2) + gap + (padding * 2) + captionHeight;
    }
    
    finalCanvas.width = canvasWidth;
    finalCanvas.height = canvasHeight;
    const ctx = finalCanvas.getContext('2d');
    
    if (settings.background === 'gradient') {
      const gradient = ctx.createLinearGradient(0, 0, canvasWidth, canvasHeight);
      gradient.addColorStop(0, '#3B82F6');
      gradient.addColorStop(1, '#A855F7');
      ctx.fillStyle = gradient;
    } else {
      const bgColors = {
        'white': '#FFFFFF',
        'black': '#000000',
        'red': '#EF4444',
        'blue': '#3B82F6'
      };
      ctx.fillStyle = bgColors[settings.background] || '#FFFFFF';
    }
    ctx.fillRect(0, 0, canvasWidth, canvasHeight);
    
    capturedPhotos.forEach((photoData, index) => {
      const img = new Image();
      img.src = photoData;
      
      let x, y;
      if (settings.layout === '2x1') {
        x = padding + (index * (photoWidth + gap));
        y = padding;
      } else if (settings.layout === '3x1') {
        x = padding + (index * (photoWidth + gap));
        y = padding;
      } else { 
        const col = index % 2;
        const row = Math.floor(index / 2);
        x = padding + (col * (photoWidth + gap));
        y = padding + (row * (photoHeight + gap));
      }
      
      ctx.drawImage(img, x, y, photoWidth, photoHeight);
    });
    
    ctx.fillStyle = settings.background === 'white' ? '#000000' : '#FFFFFF';
    ctx.font = 'bold 48px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(settings.caption, canvasWidth / 2, canvasHeight - 25);
    
    return finalCanvas.toDataURL('image/jpeg', 1.0);
  }

  function downloadImage() {
    const finalImage = generateFinalImage();
    const link = document.createElement('a');
    link.download = `photobooth-${Date.now()}.jpg`;
    link.href = finalImage;
    link.click();
  }

  document.addEventListener('DOMContentLoaded', () => {
    initCamera();
    
    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        document.querySelectorAll('.filter-btn').forEach(b => {
          b.classList.remove('border-purple-500', 'bg-purple-50');
          b.classList.add('border-gray-300');
        });
        btn.classList.add('border-purple-500', 'bg-purple-50');
        btn.classList.remove('border-gray-300');
        
        currentImageFilter = btn.getAttribute('data-filter');
      });
    });
    
    document.getElementById('startCaptureBtn').addEventListener('click', startCaptureSequence);
    
    document.getElementById('downloadBtn').addEventListener('click', downloadImage);
  });
</script>

<style>
  #flashOverlay {
    transition: opacity 0.3s ease;
  }
  
  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
  }
  
  #countdownNumber {
    animation: pulse 1s ease-in-out;
  }
</style>